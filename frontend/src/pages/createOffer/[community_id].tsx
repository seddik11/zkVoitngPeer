import { type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { Layout } from "../../features/Layout";
import { useImmer } from "use-immer";
import { useMutation } from "@tanstack/react-query";
import { pinJSONtoPinata, uploadFile } from "../createCommunity";
import { Loading } from "../../features/Loading";

const Listing: NextPage = () => {
  const router = useRouter();
  const listing_id = router.query.community_id as string;
  const [offerData, updateOfferData] = useImmer({
    Name: "",
    Description: "",
    Availability: "",
    Pickup: "",
    Deposit: "",
    Image: "",
  });

  const uploadImage = useMutation(async (variables: { file: File }) => {
    const data = new FormData();
    console.log("uploadImage", variables.file);
    const result = await uploadFile(variables.file);
    console.log("result", result);
    if (!result) throw new Error("Error uploading image");
    updateOfferData((draft) => {
      draft.Image = "https://bear.mypinata.cloud/ipfs/" + result;
    });
  });

  const createofferHandler = useMutation({
    mutationFn: async (variables: {}) => {
      const result = await pinJSONtoPinata(offerData);
      console.log("result", result);
      console.log("listing_id", listing_id);
      await router.back();
    },
  });

  const handleFileChange = async (e: any) => {
    console.log(e.target.files);
    const file = e.target.files[0];
    console.log(file);
    await uploadImage.mutateAsync({ file });
  };

  const handleInputChange = (e: any) => {
    const { name, value } = e.target;
    updateOfferData((draft) => {
      // @ts-ignore
      draft[name] = value;
    });
  };

  // @ts-ignore
  const handleSubmit = async (e) => {
    e.preventDefault();
    await createofferHandler.mutateAsync(offerData);
  };
  return (
    <>
      <Head>
        <title>Welcome Personal Page</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="flex flex-row">
          <form onSubmit={handleSubmit}>
            <div className="flex flex-col">
              <h1>Create a Listing</h1>
              Name:
              <input
                type="text"
                name="Name"
                onChange={handleInputChange}
                required
              />
              Description:
              <input
                type="text"
                name="Description"
                onChange={handleInputChange}
                required
              />
              Availability:
              <input
                type="text"
                name="Availability"
                onChange={handleInputChange}
                required
              />
              Pickup:
              <input
                type="text"
                name="Pickup"
                onChange={handleInputChange}
                required
              />
              Deposit:
              <input
                type="text"
                name="Deposit"
                onChange={handleInputChange}
                required
              />
              Image:
              <input
                type="file"
                name="Image"
                onChange={handleFileChange}
                required
              />
            </div>
            {createofferHandler.isLoading || uploadImage.isLoading ? (
              <Loading />
            ) : (
              <>
                <input
                  className={"btn"}
                  type="submit"
                  value="Create Listing"
                  disabled={uploadImage.isLoading}
                />
                <button
                  className="btn-neutral btn"
                  onClick={() => router.back()}
                >
                  Back
                </button>
              </>
            )}
          </form>
        </div>
      </Layout>
    </>
  );
};

export default Listing;
